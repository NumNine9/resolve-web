datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  lastActiveTimestamp       DateTime        @default(now())
  isAdmin                   Boolean         @default(false)

  paymentProcessorUserId    String?         @unique
  // lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.
  // checkoutSessionId         String?
  subscriptionStatus        String?         // 'active', 'canceled', 'past_due', 'deleted'
  subscriptionPlan          String?         // 'hobby', 'pro'
  sendNewsletter            Boolean         @default(false)
  datePaid                  DateTime?
  credits                   Int             @default(3)

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  products                  Product[]       // Relationship to Product
  reviews                   Review[]        // Relationship to Review
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}
model Category {
  id                        String          @id @default(uuid())
  name                      String          @unique
  description               String?
  products                  Product[]
}

model Product {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  name                      String
  description               String
  price                     Float
  isAvailable               Boolean         @default(true)
  imageUrl                  String?

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  stockQuantity             Int             @default(1)
  tags                      String[]
  // Relationship to Category
  category                  Category?       @relation(fields: [categoryId], references: [id])
  categoryId                String?

  // Relationship to Review
  reviews                   Review[]        // Reviews for this product
}
model Review {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  rating                    Int             // e.g., 1 to 5 stars
  comment                   String?

  // Relationship to User (who wrote the review)
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

   // Relationship to Product (the product being reviewed)
  product                   Product         @relation(fields: [productId], references: [id])
  productId                 String
}

model Item {
  id          String   @id @default(uuid()) // Unique ID for the item
  createdAt   DateTime @default(now())     // Timestamp when the item was created
  updatedAt   DateTime @updatedAt          // Timestamp when the item was last updated

  name        String                      // Name of the item
  description String                      // Description of the item
  price       Float                       // Price of the item
  isAvailable Boolean  @default(true)     // Whether the item is available
}